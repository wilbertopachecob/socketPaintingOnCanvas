name: Branch Protection Status Check

on:
  pull_request:
    branches: [ main, master, develop ]

jobs:
  # This job will only pass if all other required checks pass
  # It serves as a single status check that can be required for merging
  all-checks-pass:
    runs-on: ubuntu-latest
    needs: [test, branch-check]  # These jobs must complete before this job runs
    if: always()  # Run even if other jobs fail to provide status
    
    steps:
    - name: Check if all required jobs passed
      run: |
        # This will fail the job if any required job failed
        if [[ "${{ needs.test.result }}" == "failure" || "${{ needs.branch-check.result }}" == "failure" ]]; then
          echo "One or more required jobs failed"
          exit 1
        else
          echo "All required jobs passed"
        fi

  # Additional quality gate - ensure PR is ready for merge
  pr-quality-gate:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Fetch full history for better analysis
    
    - name: Check PR title format
      run: |
        PR_TITLE="${{ github.event.pull_request.title }}"
        echo "PR Title: $PR_TITLE"
        
        # Basic check for meaningful PR title (not just "Update" or "Fix")
        if [[ ${#PR_TITLE} -lt 10 ]]; then
          echo "❌ PR title is too short. Please provide a more descriptive title."
          exit 1
        fi
        
        echo "✅ PR title looks good"
    
    - name: Check for sensitive files
      run: |
        # Check if any sensitive files are being modified
        CHANGED_FILES=$(git diff --name-only origin/${{ github.event.pull_request.base.ref }}..HEAD)
        
        echo "Changed files:"
        echo "$CHANGED_FILES"
        
        # Check for sensitive files that shouldn't be modified
        SENSITIVE_PATTERNS=(
          "config.env$"
          "\.key$"
          "\.pem$"
          "\.p12$"
          "secret"
        )
        
        for pattern in "${SENSITIVE_PATTERNS[@]}"; do
          if echo "$CHANGED_FILES" | grep -E "$pattern"; then
            echo "❌ Sensitive file detected: $pattern"
            echo "Please ensure no secrets are committed"
            exit 1
          fi
        done
        
        echo "✅ No sensitive files detected"
